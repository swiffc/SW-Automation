using System;
using System.Linq;
using System.Text;
using UnifiedUI.Models;

namespace UnifiedUI.Services
{
    /// <summary>
    /// Generates engineering specification reports
    /// Replaces PDF workflow with automated text reports
    /// </summary>
    public class EngineeringReportGenerator
    {
        /// <summary>
        /// Generate complete text report for any component configuration
        /// </summary>
        public string GenerateTextReport(ComponentConfiguration config)
        {
            if (config == null)
                throw new ArgumentNullException(nameof(config));

            var report = new StringBuilder();
            
            // Header
            AppendLine(report, "=", 80);
            report.AppendLine("ENGINEERING SPECIFICATION REPORT");
            report.AppendLine($"Generated by UnifiedUI Automation System");
            AppendLine(report, "=", 80);
            report.AppendLine();
            
            // Job Information
            AppendSection(report, "JOB INFORMATION");
            report.AppendLine($"Job Number:      {config.JobNumber}");
            report.AppendLine($"Component Type:  {config.ComponentType}");
            report.AppendLine($"Revision:        {config.Revision ?? "R01"}");
            report.AppendLine($"Generated:       {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            report.AppendLine();
            
            // Component-specific sections
            if (config is BundleConfiguration bundleConfig)
            {
                GenerateBundleReport(report, bundleConfig);
            }
            else if (config is HeaderConfiguration headerConfig)
            {
                GenerateHeaderReport(report, headerConfig);
            }
            
            // Footer
            AppendLine(report, "=", 80);
            report.AppendLine("END OF ENGINEERING REPORT");
            report.AppendLine($"Report ID: {config.JobNumber}_{config.ComponentType}_{DateTime.Now:yyyyMMddHHmmss}");
            AppendLine(report, "=", 80);
            
            return report.ToString();
        }
        
        private void GenerateBundleReport(StringBuilder report, BundleConfiguration config)
        {
            // Bundle Dimensions
            AppendSection(report, "BUNDLE SPECIFICATIONS");
            report.AppendLine($"Bundle Width:       {config.BundleWidth:F3} inches");
            report.AppendLine($"Bundle Depth:       {config.BundleDepth:F3} inches");
            report.AppendLine($"Side Frame THK:     {config.SideFrameThickness:F3} inches");
            report.AppendLine($"Side Frame Depth:   {config.SideFrameDepth:F3} inches");
            report.AppendLine($"Headers Outside:    {(config.HeadersOutsideFrame ? "Yes" : "No")}");
            report.AppendLine();
            
            // Tube Specifications
            AppendSection(report, "TUBE SPECIFICATIONS");
            report.AppendLine($"Tube OD:            {config.TubeOD:F3} inches");
            report.AppendLine($"Tube Wall THK:      {config.TubeWallThickness:F4} inches");
            report.AppendLine($"Tube ID:            {(config.TubeOD - 2 * config.TubeWallThickness):F3} inches");
            report.AppendLine($"Tube Length:        {config.TubeLength:F2} inches");
            report.AppendLine($"Tube Projection:    {config.TubeProjection:F2} inches");
            if (config.FinOD > 0)
            {
                report.AppendLine($"Fin OD:             {config.FinOD:F3} inches (Finned Tube)");
            }
            else
            {
                report.AppendLine($"Fin Type:           Plain Tube");
            }
            report.AppendLine();
            
            // Tube Layout
            AppendSection(report, "TUBE LAYOUT CONFIGURATION");
            report.AppendLine($"Row 1 Tube Count:   {config.TubeRow1Count} tubes");
            report.AppendLine($"Row 2 Tube Count:   {config.TubeRow2Count} tubes");
            report.AppendLine($"Total Tubes:        {config.TubeRow1Count + config.TubeRow2Count} tubes");
            report.AppendLine($"Horizontal Pitch:   {config.HorizontalPitch:F3} inches");
            var avgVerticalPitch = config.FrontVerticalPitches.Count > 0 ? config.FrontVerticalPitches.Average() : 0;
            report.AppendLine($"Avg Vertical Pitch: {avgVerticalPitch:F3} inches ({config.FrontVerticalPitches.Count} rows)");
            report.AppendLine();
            
            // Calculated Values
            AppendSection(report, "CALCULATED DIMENSIONS");
            double bundleHeight = CalculateBundleHeight(config);
            report.AppendLine($"Bundle Height:      {bundleHeight:F3} inches (estimated)");
            report.AppendLine($"Bundle Volume:      {(config.BundleWidth * bundleHeight * config.BundleDepth / 1728):F2} cubic feet");
            report.AppendLine();
        }
        
        private void GenerateHeaderReport(StringBuilder report, HeaderConfiguration config)
        {
            // Header Box
            AppendSection(report, "HEADER BOX SPECIFICATIONS");
            report.AppendLine($"Header Type:        {config.HeaderType}");
            report.AppendLine($"Box Width:          {config.BoxWidth:F3} inches");
            report.AppendLine($"Box Height:         {config.BoxHeight:F3} inches");
            report.AppendLine($"Box Length:         {config.BoxLength:F3} inches");
            report.AppendLine();
            
            // Tubesheet
            AppendSection(report, "TUBESHEET SPECIFICATIONS");
            report.AppendLine($"Thickness:          {config.TubesheetThickness:F3} inches");
            report.AppendLine($"Tube Hole Pattern:  Per bundle layout");
            report.AppendLine();
            
            // Pressure Design
            AppendSection(report, "PRESSURE DESIGN");
            report.AppendLine($"Design Pressure:    {config.DesignPressure:F1} psig");
            report.AppendLine($"MAWP:               {config.MAWP:F1} psig");
            if (config.MAWP >= config.DesignPressure)
            {
                report.AppendLine($"Safety Check:       PASS (MAWP >= Design Pressure)");
            }
            else
            {
                report.AppendLine($"Safety Check:       WARNING! MAWP < Design Pressure");
            }
            report.AppendLine();
        }
        
        /// <summary>
        /// Save report to file
        /// </summary>
        public void SaveReportToFile(ComponentConfiguration config, string filePath)
        {
            var report = GenerateTextReport(config);
            System.IO.File.WriteAllText(filePath, report);
        }
        
        /// <summary>
        /// Generate HTML report (future enhancement)
        /// </summary>
        public string GenerateHtmlReport(ComponentConfiguration config)
        {
            // TODO: Create HTML version with formatting
            var textReport = GenerateTextReport(config);
            return $"<html><body><pre>{textReport}</pre></body></html>";
        }
        
        // Helper methods
        private void AppendSection(StringBuilder sb, string title)
        {
            AppendLine(sb, "-", 40);
            sb.AppendLine(title);
            AppendLine(sb, "-", 40);
        }
        
        private void AppendLine(StringBuilder sb, string character, int count)
        {
            sb.AppendLine(new string(character[0], count));
        }
        
        private double CalculateBundleHeight(BundleConfiguration config)
        {
            // Simplified calculation - actual would come from Excel
            // Assumes 2 rows with average vertical pitch
            var avgVerticalPitch = config.FrontVerticalPitches.Count > 0 ? config.FrontVerticalPitches.Average() : 2.0;
            return avgVerticalPitch + (2 * config.TubeOD) + (2 * config.SideFrameThickness);
        }
    }
}
